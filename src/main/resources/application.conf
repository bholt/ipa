# Cassandra Cluster Configuration
#
# host = ["host1", "host2", "host3]
# keyspace = The keyspace name you want to connect
ipa {

  disable.perf.tests = ${?CIRCLECI}

  cassandra {
    host = [${?CASSANDRA_HOST}]
    keyspace = "owl"
  }

  reservations {
    port = 14710
    lease = "1s" // how long before a reservation allocation expires (this is how long it will take after the last write before interval width will reduce)
  }

  output.json = ${?IPA_OUTPUT_JSON}

  replica.strategy = "{'class':'NetworkTopologyStrategy','dc1':1,'dc2':1,'dc3':1}"
  replica.strategy = ${?IPA_REPLICATION}
  reset = true # should we reset keyspace before running (must be true if replication changes)

  cap = 100  # capacity of execution context queue (controls max parallel tasks)
  nthreads = 12 # number of threads to use
  consistency = "strong"  # "strong" or "weak"
  concurrent.requests = 2048
  assumed.latency = "5ms" # assume it'll take at least this long to issue a request

  bound = "latency:50ms"

  lease {
    period = "0ms"
  }
  # bound = "consistency:strong"
  # bound = "consistency:weak"

  zipf     = 1.0  # Zipf dist. skew parameter (1.0 corresponds to Zipf's Law)
  duration = 10   # Number of seconds to run workload for.

  rawmix {
    nsets = 100
    target = 1000
    mix {
      add = 0.3
      contains = 0.6
      size = 0.1
    }
    counter.mix {
      read = 0.8
      incr = 0.2
    }
    check.probability = 0.05 # how often to check the consistency
  }

  retwis {
    generate = true # whether to generate initial data (or keep what's there)
    initial {
      users = 100   # number of users
      followers = 8   # avg followers/user (zipf-distributed)
      tweets = 2   # tweets per user
    }
  }

  tickets {
    generate = true
    initial {
      venues = 50
      events = 200
      remaining = 2000
    }
    mix {
      purchase = 0.1
      view     = 0.7
      browse   = 0.19
      create   = 0.01
    }
  }

}
